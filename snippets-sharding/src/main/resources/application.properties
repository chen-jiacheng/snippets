# server config
server.port=8080

# datasource config
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.url=jdbc:mysql://127.0.0.1:3306/spring
#spring.datasource.username=root
#spring.datasource.password=Yqywf,Rmhpy.1@

# mybatis config
mybatis.mapper-locations=classpath:mapper/*xml
mybatis.type-aliases-package=com.chenjiacheng.snippets.sharding.dao.model


# sharding-jdbc config
spring.shardingsphere.datasource.names=g1
spring.main.allow-bean-definition-overriding=true

# sharding-jdbc dataSource
spring.shardingsphere.datasource.g1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.g1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.g1.url=dbc:mysql://localhost:3306/sharding_test?characterEncoding=utf-8&useUnicode=true&useSSL=false&serverTimezone=UTC
spring.shardingsphere.datasource.g1.username=root
spring.shardingsphere.datasource.g1.password=Yqywf,Rmhpy.1@

# sharding-jdbc algorithm config
spring.shardingsphere.sharding.tables.user.actual-data-nodes=g1.user_$->{1..2}

# sharding-jdbc table config
spring.shardingsphere.sharding.tables.user.key-generator.column=id
spring.shardingsphere.sharding.tables.user.key-generator.type=SNOWFLAKE

# sharding-jdbc sharding strategy
spring.shardingsphere.sharding.tables.user.table-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.tables.user.table-strategy.inline.algorithm-expression=user_$->{id % 2 + 1}

# sharding-jdbc log
spring.shardingsphere.props.sql.show=true



